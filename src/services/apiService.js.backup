/**
 * API通信サービス
 */

import { calculateSimilarity } from '../utils/comparisonUtils';

// タイトル一致度による検索結果のフィルタリングと順位付け
const filterAndRankByTitle = (results, parsedInfo) => {
  if (!parsedInfo.title || results.length === 0) {
    return results;
  }

  const originalTitle = parsedInfo.title.toLowerCase().trim();
  console.log(`📋 タイトル一致度分析: "${originalTitle}"`);

  // 完全一致を最優先で検索
  const exactMatches = results.filter(result => {
    if (!result.title) return false;
    const resultTitle = result.title.toLowerCase().trim();
    const isExact = resultTitle === originalTitle;
    if (isExact) {
      console.log(`🎯 完全一致発見: "${result.title}"`);
    }
    return isExact;
  });

  if (exactMatches.length > 0) {
    console.log(`✅ ${exactMatches.length}件の完全一致を返却`);
    return exactMatches;
  }

  // 部分一致の場合、類似度でソートして上位を返す
  const partialMatches = results
    .map(result => {
      if (!result.title) return { ...result, similarity: 0 };
      
      const similarity = calculateSimilarity(originalTitle, result.title.toLowerCase().trim());
      
      // 掲載誌名も考慮してスコアを調整
      let adjustedScore = similarity;
      if (parsedInfo.journal && result.journal) {
        const journalSimilarity = calculateSimilarity(
          parsedInfo.journal.toLowerCase().trim(),
          result.journal.toLowerCase().trim()
        );
        // タイトル80% + 掲載誌名20%の重み付け
        adjustedScore = similarity * 0.8 + journalSimilarity * 0.2;
      }
      
      return { ...result, similarity, adjustedScore };
    })
    .filter(result => result.similarity >= 40) // 閾値を緩和 60% → 40%
    .sort((a, b) => b.adjustedScore - a.adjustedScore)
    .slice(0, 8); // 各データベースから上位8件まで

  console.log(`📊 部分一致結果: ${partialMatches.length}件 (40%以上の類似度)`);
  partialMatches.forEach(result => {
    console.log(`  - "${result.title}" (類似度: ${result.similarity.toFixed(1)}%, 調整スコア: ${result.adjustedScore.toFixed(1)}%)`);
  });

  return partialMatches;
};

// API設定
const isDevelopment = process.env.NODE_ENV === 'development';
const API_BASE = isDevelopment ? 'http://localhost:3001' : '';

const API_CONFIG = {
  CROSSREF: {
    endpoint: `${API_BASE}/api/crossref`,
    timeout: 10000
  },
  SEMANTIC_SCHOLAR: {
    endpoint: `${API_BASE}/api/semantic-scholar`,
    timeout: 10000
  },
  CINII: {
    endpoint: `${API_BASE}/api/cinii`,
    timeout: 10000
  }
};

// APIリクエストのヘルパー関数
const fetchWithTimeout = async (url, options = {}, timeout = 10000) => {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  
  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal
    });
    clearTimeout(id);
    return response;
  } catch (error) {
    clearTimeout(id);
    if (error.name === 'AbortError') {
      throw new Error('Request timeout');
    }
    throw error;
  }
};

// 段階的検索戦略：より具体的な検索から始めて、段階的に検索範囲を広げる
const executeGradualSearch = async (parsedInfo, searchFunc) => {
  const allResults = [];
  
  // 段階1: タイトル + 著者名 + 掲載誌名 (最も具体的)
  if (parsedInfo.title && parsedInfo.authors?.length > 0 && parsedInfo.journal) {
    const authorName = parsedInfo.authors[0]; // 第一著者
    const query1 = `"${parsedInfo.title}" "${authorName}" "${parsedInfo.journal}"`;
    console.log(`🎯 段階1検索: タイトル+著者+掲載誌 - "${query1}"`);
    const results1 = await searchFunc(query1, 5);
    if (results1.length > 0) {
      console.log(`✅ 段階1で${results1.length}件発見`);
      allResults.push(...results1);
    }
  }
  
  // 段階2: タイトル + 掲載誌名 (原著論文を優先的に発見)
  if (parsedInfo.title && parsedInfo.journal && allResults.length < 3) {
    const query2 = `"${parsedInfo.title}" "${parsedInfo.journal}"`;
    console.log(`🎯 段階2検索: タイトル+掲載誌 - "${query2}"`);
    const results2 = await searchFunc(query2, 8);
    if (results2.length > 0) {
      console.log(`✅ 段階2で${results2.length}件発見`);
      // 重複を除去して追加
      const uniqueResults2 = results2.filter(r2 => 
        !allResults.some(r1 => r1.title === r2.title)
      );
      allResults.push(...uniqueResults2);
    }
  }
  
  // 段階3: タイトル + 著者名
  if (parsedInfo.title && parsedInfo.authors?.length > 0 && allResults.length < 5) {
    const authorName = parsedInfo.authors[0];
    const query3 = `"${parsedInfo.title}" "${authorName}"`;
    console.log(`🎯 段階3検索: タイトル+著者 - "${query3}"`);
    const results3 = await searchFunc(query3, 8);
    if (results3.length > 0) {
      console.log(`✅ 段階3で${results3.length}件発見`);
      const uniqueResults3 = results3.filter(r3 => 
        !allResults.some(r1 => r1.title === r3.title)
      );
      allResults.push(...uniqueResults3);
    }
  }
  
  // 段階4: タイトルのみ (従来の検索)
  if (parsedInfo.title && allResults.length < 8) {
    console.log(`🎯 段階4検索: タイトルのみ - "${parsedInfo.title}"`);
    const results4 = await searchFunc(parsedInfo.title, 10);
    if (results4.length > 0) {
      console.log(`✅ 段階4で${results4.length}件発見`);
      const uniqueResults4 = results4.filter(r4 => 
        !allResults.some(r1 => r1.title === r4.title)
      );
      allResults.push(...uniqueResults4);
    }
  }
  
  console.log(`📊 段階的検索完了: 計${allResults.length}件の候補`);
  return allResults;
};

// CrossRef API検索（段階的検索戦略）
const searchCrossRef = async (parsedInfo) => {
  if (!parsedInfo.title || parsedInfo.title.trim() === '') {
    console.warn('CrossRef: タイトルがないため検索をスキップ');
    return [];
  }

  console.log(`🔍 CrossRef 段階的検索開始`);

  // CrossRef専用の検索実行関数
  const executeSearch = async (query, limit = 10) => {
    let queryParams = new URLSearchParams({
      query: query,
      rows: limit.toString()
    });

    try {
    let response = await fetchWithTimeout(
      `${API_CONFIG.CROSSREF.endpoint}?${queryParams}`,
      {},
      API_CONFIG.CROSSREF.timeout
    );

    if (!response.ok) {
      console.error('CrossRef API error:', response.status);
      return [];
    }

    const data = await response.json();
    
    if (data.message && data.message.items) {
      const allResults = data.message.items.map(item => ({
        title: item.title?.[0] || '',
        authors: item.author ? item.author.map(a => `${a.given || ''} ${a.family || ''}`.trim()) : [],
        year: item.published?.['date-parts']?.[0]?.[0]?.toString() || '',
        doi: item.DOI || '',
        journal: item['container-title']?.[0] || item.publisher || '',
        volume: item.volume || '',
        issue: item.issue || '',
        pages: item.page || '',
        url: item.URL || '',
        source: 'CrossRef',
        originalData: item
      }));

      // タイトル一致度による絞り込み
      return filterAndRankByTitle(allResults, parsedInfo);
    }
    
    return [];
  } catch (error) {
    console.error('CrossRef API error:', error);
    return [];
    }
  };

  // 段階的検索を実行
  return await executeGradualSearch(parsedInfo, executeSearch);
};

// Semantic Scholar API検索（タイトル中心戦略）  
const searchSemanticScholar = async (parsedInfo) => {
  if (!parsedInfo.title || parsedInfo.title.trim() === '') {
    console.warn('Semantic Scholar: タイトルがないため検索をスキップ');
    return [];
  }

  console.log(`🎯 Semantic Scholar タイトル検索: "${parsedInfo.title}"`);

  // 短いタイトルの場合は掲載誌名も含めて検索
  let query = parsedInfo.title;
  const isShortTitle = parsedInfo.title.length <= 20;
  
  if (isShortTitle && parsedInfo.journal) {
    query = `${parsedInfo.title} ${parsedInfo.journal}`;
    console.log(`📋 短いタイトル検出 - 掲載誌名併用検索: "${query}"`);
  }

  const queryParams = new URLSearchParams({
    query: query,
    limit: '15',
    fields: 'title,authors,year,venue,doi,url'
  });

  try {
    const response = await fetchWithTimeout(
      `${API_CONFIG.SEMANTIC_SCHOLAR.endpoint}?${queryParams}`,
      {},
      API_CONFIG.SEMANTIC_SCHOLAR.timeout
    );

    if (!response.ok) {
      console.error('Semantic Scholar API error:', response.status);
      return [];
    }

    const data = await response.json();
    
    if (data.data) {
      const allResults = data.data.map(item => ({
        title: item.title || '',
        authors: item.authors ? item.authors.map(a => a.name) : [],
        year: item.year?.toString() || '',
        doi: item.doi || '',
        journal: item.venue || '',
        volume: '', // Semantic Scholarは巻号情報を提供しない
        issue: '',
        pages: '',
        url: item.url || '',
        source: 'Semantic Scholar',
        originalData: item
      }));

      // タイトル一致度による絞り込み
      return filterAndRankByTitle(allResults, parsedInfo);
    }
    
    return [];
  } catch (error) {
    console.error('Semantic Scholar API error:', error);
    return [];
  }
};

// CiNii API検索（タイトル中心戦略）
const searchCiNii = async (parsedInfo) => {
  console.log('🔍 CiNii検索開始 - parsedInfo:', {
    title: parsedInfo.title,
    language: parsedInfo.language,
    authors: parsedInfo.authors
  });
  
  if (!parsedInfo.title || parsedInfo.title.trim() === '') {
    console.warn('❌ CiNii: タイトルがないため検索をスキップ');
    return [];
  }

  console.log(`🎯 CiNii タイトル検索: "${parsedInfo.title}"`);

  // タイトルを中心とした検索語を構成
  const searchTerm = parsedInfo.title;

  const queryParams = new URLSearchParams({
    q: searchTerm,
    count: '20',
    start: '1',
    format: 'rss'
  });

  console.log('🌐 CiNii API呼び出し URL:', `${API_CONFIG.CINII.endpoint}?${queryParams}`);
  
  try {
    const response = await fetchWithTimeout(
      `${API_CONFIG.CINII.endpoint}?${queryParams}`,
      {},
      API_CONFIG.CINII.timeout
    );

    if (!response.ok) {
      console.error('❌ CiNii API error:', response.status, response.statusText);
      return [];
    }
    
    console.log('✅ CiNii API response received, status:', response.status);

    const responseText = await response.text();
    console.log('📜 CiNii RSS response length:', responseText.length);
    console.log('📄 CiNii RSS response preview:', responseText.substring(0, 500));
    
    // RSS形式のレスポンスを解析
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(responseText, 'text/xml');
    const items = xmlDoc.querySelectorAll('item');
    
    console.log('📊 CiNii found items count:', items.length);
    
    if (items.length > 0) {
      const allResults = Array.from(items).map(item => {
        // RSS要素から情報を抽出
        const title = item.querySelector('title')?.textContent || '';
        
        // 著者名を抽出 (dc:creator)
        const creators = item.querySelectorAll('dc\\:creator, creator');
        const authors = Array.from(creators).map(creator => creator.textContent || '');
        
        // 掲載誌名を抽出 (prism:publicationName)
        const journalEl = item.querySelector('prism\\:publicationName, publicationName');
        const journal = journalEl?.textContent || '';
        
        // 出版年を抽出 (複数のフィールドを確認)
        const dateSelectors = [
          'prism\\:publicationDate', 'publicationDate',
          'dc\\:date', 'date',
          'prism\\:datePublished', 'datePublished',
          'pubDate'
        ];
        
        let year = '';
        let dateText = '';
        
        for (const selector of dateSelectors) {
          const dateEl = item.querySelector(selector);
          if (dateEl && dateEl.textContent) {
            dateText = dateEl.textContent;
            const yearMatch = dateText.match(/\d{4}/);
            if (yearMatch) {
              year = yearMatch[0];
              break;
            }
          }
        }
        
        // 年号デバッグ情報
        console.log(`📅 年号抽出: "${title.substring(0, 30)}..." dateText="${dateText}" year="${year}"`);
        
        // URL (link要素)
        const linkEl = item.querySelector('link');
        const url = linkEl?.textContent || '';
        
        // DOI (dc:identifier)
        const doiEl = item.querySelector('dc\\:identifier, identifier');
        const doi = doiEl?.textContent || '';
        
        // 巻号・ページ情報を抽出 (prism:volume, prism:number, prism:startingPage, prism:endingPage)
        const volumeEl = item.querySelector('prism\\:volume, volume');
        const volume = volumeEl?.textContent || '';
        
        const numberEl = item.querySelector('prism\\:number, number');
        const issue = numberEl?.textContent || '';
        
        const startPageEl = item.querySelector('prism\\:startingPage, startingPage');
        const endPageEl = item.querySelector('prism\\:endingPage, endingPage');
        const startPage = startPageEl?.textContent || '';
        const endPage = endPageEl?.textContent || '';
        
        // ページ範囲を構築
        let pages = '';
        if (startPage && endPage) {
          pages = `${startPage}-${endPage}`;
        } else if (startPage) {
          pages = startPage;
        }
        
        // デバッグ情報
        console.log(`📋 CiNii記事: "${title.substring(0, 30)}..."`, {
          volume: volume || '(なし)',
          issue: issue || '(なし)', 
          pages: pages || '(なし)',
          journal: journal || '(なし)'
        });
        
        return {
          title,
          authors,
          year,
          doi,
          journal,
          volume,
          issue,
          pages,
          url,
          source: 'CiNii',
          originalData: {
            title: title,
            creators: authors,
            journal: journal,
            date: dateText,
            volume: volume,
            issue: issue,
            pages: pages,
            link: url,
            doi: doi
          }
        };
      });

      // タイトル一致度による絞り込み
      return filterAndRankByTitle(allResults, parsedInfo);
    }
    
    return [];
  } catch (error) {
    console.error('CiNii API error:', error);
    return [];
  }
};

// 統合検索関数
export const searchAllDatabases = async (parsedInfo, onProgress) => {
  const results = {
    crossref: [],
    semanticScholar: [],
    cinii: []
  };

  console.log(`🌐 検索開始 - 言語: ${parsedInfo.language}, タイトル: ${parsedInfo.title?.substring(0, 30)}...`);

  // 言語に応じて検索順序と対象を変更
  let searchOrder;
  console.log('🔍 言語判定結果:', parsedInfo.language);
  
  if (parsedInfo.language === 'japanese') {
    // 日本語の場合はCiNiiを最優先、CrossRefは補助的に
    searchOrder = ['cinii', 'crossref'];
    console.log('📚 日本語文献として検索: CiNii → CrossRef');
  } else {
    // 英語の場合は従来通り
    searchOrder = ['crossref', 'semanticScholar'];
    console.log('📖 英語文献として検索: CrossRef → Semantic Scholar');
  }
  
  console.log('📝 検索順序:', searchOrder);

  for (const source of searchOrder) {
    if (onProgress) {
      onProgress(source, 'searching');
    }

    try {
      let searchResults = [];
      
      console.log(`🔍 ${source} 検索開始...`);
      
      switch (source) {
        case 'crossref':
          searchResults = await searchCrossRef(parsedInfo);
          results.crossref = searchResults;
          break;
        case 'semanticScholar':
          searchResults = await searchSemanticScholar(parsedInfo);
          results.semanticScholar = searchResults;
          break;
        case 'cinii':
          searchResults = await searchCiNii(parsedInfo);
          results.cinii = searchResults;
          break;
        default:
          console.warn(`Unknown search source: ${source}`);
          break;
      }

      console.log(`✅ ${source} 検索完了: ${searchResults.length}件の結果`);
      
      if (onProgress) {
        onProgress(source, 'completed', searchResults.length);
      }
    } catch (error) {
      console.error(`❌ ${source} 検索エラー:`, error);
      if (onProgress) {
        onProgress(source, 'error');
      }
    }
  }

  // 全結果を統合して返す
  return [
    ...results.crossref,
    ...results.semanticScholar,
    ...results.cinii
  ];
};

// 関数をエクスポート
export { searchCrossRef, searchSemanticScholar, searchCiNii };